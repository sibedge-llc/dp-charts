kind: Pod
apiVersion: v1
metadata:
  name: spark-history-server
  namespace: default
  labels:
    app.kubernetes.io/instance: spark-history-server
    app.kubernetes.io/name: spark-history-server 
 
spec:
  volumes:
    - name: config-volume
      configMap:
        name: spark-history-server-spark-hs-config
        defaultMode: 420
    - name: kube-api-access-xklzb
      projected:
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              name: kube-root-ca.crt
              items:
                - key: ca.crt
                  path: ca.crt
          - downwardAPI:
              items:
                - path: namespace
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
        defaultMode: 420
  containers:
    - name: spark-history-server
      image: >-
        datamechanics/spark:3.2.0-hadoop-3.3.1-java-11-scala-2.12-python-3.8-latest
      command: [ "/bin/bash", "-c", "--" ]
      args: [ "while true; do sleep 30; done;" ]
      ports:
        - name: http
          containerPort: 18080
          protocol: TCP
      env:
        - name: SPARK_NO_DAEMONIZE
          value: 'false'
        - name: SPARK_HISTORY_OPTS
          value: '-Dspark.history.fs.logDirectory=s3a://spark/spark-logs'
        - name: AWS_ROLE_SESSION_NAME
          value: spark-hs
        - name: SPARK_CONF_DIR
          value: /opt/spark/conf
      resources: {}
      volumeMounts:
        - name: config-volume
          mountPath: /opt/spark/conf/spark-defaults.conf
          subPath: spark-defaults.conf
        - name: kube-api-access-xklzb
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  
  securityContext: {}
  schedulerName: default-scheduler
  tolerations:
    - key: node.kubernetes.io/not-ready
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
    - key: node.kubernetes.io/unreachable
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
  priority: 0
  enableServiceLinks: true
 
